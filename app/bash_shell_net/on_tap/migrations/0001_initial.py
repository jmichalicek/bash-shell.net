# Generated by Django 3.0.5 on 2020-07-25 21:37

from decimal import Decimal
import django.contrib.postgres.fields.citext
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.blocks
import wagtail.fields
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0045_assign_unlock_grouppagepermission"),
    ]

    operations = [
        migrations.CreateModel(
            name="BatchLogIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="BatchLogPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("brewing", "Brewing"),
                            ("fermenting", "Fermenting"),
                            ("complete", "Complete"),
                        ],
                        default="planned",
                        max_length=25,
                    ),
                ),
                ("brewed_date", models.DateField(blank=True, default=None, null=True)),
                ("packaged_date", models.DateField(blank=True, default=None, null=True)),
                ("on_tap_date", models.DateField(blank=True, default=None, null=True)),
                ("off_tap_date", models.DateField(blank=True, default=None, null=True)),
                (
                    "original_gravity",
                    models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=4, null=True),
                ),
                (
                    "final_gravity",
                    models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=4, null=True),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("heading", wagtail.blocks.CharBlock(classname="full title")),
                            (
                                "paragraph",
                                wagtail.blocks.RichTextBlock(
                                    features=[
                                        "h1",
                                        "h2",
                                        "h3",
                                        "h4",
                                        "h5",
                                        "h6",
                                        "ol",
                                        "ul",
                                        "bold",
                                        "italic",
                                        "code",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "blockquote",
                                        "link",
                                        "documentlink",
                                        "image",
                                        "embed",
                                    ]
                                ),
                            ),
                            (
                                "code",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "language",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("", "Auto"),
                                                    ("bash", "Bash/Shell"),
                                                    ("batch", "Batch"),
                                                    ("c", "C"),
                                                    ("cpp", "C++"),
                                                    ("csharp", "C#"),
                                                    ("css", "CSS"),
                                                    ("docker", "Dockerfile"),
                                                    ("elixir", "Elixir"),
                                                    ("go", "Go"),
                                                    ("htmldjango", "Django Template"),
                                                    ("html", "HTML"),
                                                    ("javascript", "JavaScript"),
                                                    ("json", "JSON"),
                                                    ("lisp", "Lisp"),
                                                    ("make", "Makefile"),
                                                    ("nginx", "NGiNX Config"),
                                                    ("perl", "Perl"),
                                                    ("php", "PHP"),
                                                    ("python", "Python"),
                                                    ("jsx", "React JSX"),
                                                    ("ruby", "Ruby"),
                                                    ("erb", "Ruby Template/ERB"),
                                                    ("sass", "SASS"),
                                                    ("scss", "SCSS"),
                                                    ("sql", "SQL"),
                                                    ("terraform", "Terraform"),
                                                    ("yaml", "YAML"),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                        ("filename", wagtail.blocks.CharBlock(default="", required=False)),
                                        ("display_filename", wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ("code", wagtail.blocks.TextBlock(default="", required=False)),
                                        (
                                            "line_numbers",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[("", "None"), ("table", "Table"), ("inline", "Inline")],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("quote", wagtail.blocks.BlockQuoteBlock()),
                            ("other_page", wagtail.blocks.PageChooserBlock()),
                            ("document", wagtail.documents.blocks.DocumentChooserBlock()),
                            ("image", wagtail.images.blocks.ImageChooserBlock(template="wagtail_blocks/image.html")),
                            (
                                "image_detail",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("image", wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(label="Caption", max_length=200, required=False),
                                        ),
                                        ("attribution", wagtail.blocks.CharBlock(required=False)),
                                        ("license_url", wagtail.blocks.URLBlock(required=False)),
                                        ("license_name", wagtail.blocks.CharBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                "image_gallery",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image_items",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        ("image", wagtail.images.blocks.ImageChooserBlock()),
                                                        (
                                                            "caption",
                                                            wagtail.blocks.CharBlock(
                                                                label="Caption", max_length=200, required=False
                                                            ),
                                                        ),
                                                        ("attribution", wagtail.blocks.CharBlock(required=False)),
                                                        ("license_url", wagtail.blocks.URLBlock(required=False)),
                                                        ("license_name", wagtail.blocks.CharBlock(required=False)),
                                                    ]
                                                ),
                                                label="Image",
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            ("embed", wagtail.embeds.blocks.EmbedBlock()),
                            ("text", wagtail.blocks.TextBlock()),
                            ("raw_html", wagtail.blocks.RawHTMLBlock()),
                        ],
                        blank=True,
                        default=None,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, "wagtailcore.page"),
        ),
        migrations.CreateModel(
            name="BeverageStyle",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", django.contrib.postgres.fields.citext.CICharField(max_length=50)),
                ("style_guide", models.CharField(blank=True, default="", max_length=50)),
                ("category", models.CharField(blank=True, default="", max_length=100)),
                ("category_number", models.SmallIntegerField(blank=True, default=None, null=True)),
                ("style_letter", models.CharField(blank=True, default="", max_length=1)),
                (
                    "beverage_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ale", "Ale"),
                            ("lager", "Lager"),
                            ("cider", "Cider"),
                            ("mead", "Mead"),
                            ("mixed", "Mixed"),
                        ],
                        db_index=True,
                        default="",
                        max_length=25,
                    ),
                ),
                (
                    "original_gravity_min",
                    models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=4, null=True),
                ),
                (
                    "original_gravity_max",
                    models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=4, null=True),
                ),
                (
                    "final_gravity_min",
                    models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=4, null=True),
                ),
                (
                    "final_gravity_max",
                    models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=4, null=True),
                ),
                ("ibu_min", models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=5, null=True)),
                ("ibu_max", models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=5, null=True)),
                (
                    "color_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        help_text="Minimum SRM value",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "color_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        help_text="Maximum SRM value",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "abv_min",
                    models.DecimalField(
                        blank=True, decimal_places=2, default=None, help_text="Minimum ABV %", max_digits=5, null=True
                    ),
                ),
                (
                    "abv_max",
                    models.DecimalField(
                        blank=True, decimal_places=2, default=None, help_text="Maximum ABV %", max_digits=5, null=True
                    ),
                ),
                (
                    "carbonation_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        help_text="Minimum carbonation vol/vol",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "carbonation_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        help_text="Maximum carbonation vol/vol",
                        max_digits=5,
                        null=True,
                    ),
                ),
                ("notes", models.TextField(blank=True, default="")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="OnTapPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="RecipeIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="RecipePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                ("name", django.contrib.postgres.fields.citext.CICharField(max_length=100)),
                (
                    "short_description",
                    models.TextField(
                        blank=True, default="", help_text="A one or two sentence description of the recipe."
                    ),
                ),
                (
                    "recipe_type",
                    models.CharField(
                        choices=[("all_grain", "All Grain"), ("extract", "Extract"), ("partial_mash", "Partial Mash")],
                        default="all_grain",
                        max_length=25,
                    ),
                ),
                ("brewer", models.CharField(blank=True, default="", max_length=250)),
                ("assistant_brewer", models.CharField(blank=True, default="", max_length=250)),
                (
                    "volume_units",
                    models.CharField(
                        choices=[("fl_oz", "Fluid Oz."), ("l", "Liters"), ("gal", "Gallons"), ("quart", "Quarts")],
                        max_length=10,
                    ),
                ),
                (
                    "batch_size",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Target size of finished batch in liters.",
                        max_digits=5,
                    ),
                ),
                (
                    "boil_size",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Starting size for the main boil of the wort in liters.",
                        max_digits=5,
                    ),
                ),
                ("boil_time", models.IntegerField(help_text="Total time to boil the wort in minutes.")),
                (
                    "efficiency",
                    models.SmallIntegerField(
                        blank=True,
                        default=None,
                        help_text="Percent brewhouse efficiency to be used for estimating the starting gravity of the beer. Required for Partial Mash and All Grain recipes.",
                        null=True,
                    ),
                ),
                (
                    "boil_gravity",
                    models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=4, null=True),
                ),
                ("original_gravity", models.DecimalField(decimal_places=3, default=Decimal("0"), max_digits=4)),
                ("final_gravity", models.DecimalField(decimal_places=3, default=Decimal("0"), max_digits=4)),
                ("ibus_tinseth", models.DecimalField(decimal_places=2, default=Decimal("0"), max_digits=5)),
                ("notes", wagtail.fields.RichTextField(blank=True, default="")),
                (
                    "introduction",
                    wagtail.fields.StreamField(
                        [
                            ("heading", wagtail.blocks.CharBlock(classname="full title")),
                            (
                                "paragraph",
                                wagtail.blocks.RichTextBlock(
                                    features=[
                                        "h1",
                                        "h2",
                                        "h3",
                                        "h4",
                                        "h5",
                                        "h6",
                                        "ol",
                                        "ul",
                                        "bold",
                                        "italic",
                                        "code",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "blockquote",
                                        "link",
                                        "documentlink",
                                        "image",
                                        "embed",
                                    ]
                                ),
                            ),
                            (
                                "code",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "language",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("", "Auto"),
                                                    ("bash", "Bash/Shell"),
                                                    ("batch", "Batch"),
                                                    ("c", "C"),
                                                    ("cpp", "C++"),
                                                    ("csharp", "C#"),
                                                    ("css", "CSS"),
                                                    ("docker", "Dockerfile"),
                                                    ("elixir", "Elixir"),
                                                    ("go", "Go"),
                                                    ("htmldjango", "Django Template"),
                                                    ("html", "HTML"),
                                                    ("javascript", "JavaScript"),
                                                    ("json", "JSON"),
                                                    ("lisp", "Lisp"),
                                                    ("make", "Makefile"),
                                                    ("nginx", "NGiNX Config"),
                                                    ("perl", "Perl"),
                                                    ("php", "PHP"),
                                                    ("python", "Python"),
                                                    ("jsx", "React JSX"),
                                                    ("ruby", "Ruby"),
                                                    ("erb", "Ruby Template/ERB"),
                                                    ("sass", "SASS"),
                                                    ("scss", "SCSS"),
                                                    ("sql", "SQL"),
                                                    ("terraform", "Terraform"),
                                                    ("yaml", "YAML"),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                        ("filename", wagtail.blocks.CharBlock(default="", required=False)),
                                        ("display_filename", wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ("code", wagtail.blocks.TextBlock(default="", required=False)),
                                        (
                                            "line_numbers",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[("", "None"), ("table", "Table"), ("inline", "Inline")],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("quote", wagtail.blocks.BlockQuoteBlock()),
                            ("other_page", wagtail.blocks.PageChooserBlock()),
                            ("document", wagtail.documents.blocks.DocumentChooserBlock()),
                            ("image", wagtail.images.blocks.ImageChooserBlock(template="wagtail_blocks/image.html")),
                            (
                                "image_detail",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("image", wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(label="Caption", max_length=200, required=False),
                                        ),
                                        ("attribution", wagtail.blocks.CharBlock(required=False)),
                                        ("license_url", wagtail.blocks.URLBlock(required=False)),
                                        ("license_name", wagtail.blocks.CharBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                "image_gallery",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image_items",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        ("image", wagtail.images.blocks.ImageChooserBlock()),
                                                        (
                                                            "caption",
                                                            wagtail.blocks.CharBlock(
                                                                label="Caption", max_length=200, required=False
                                                            ),
                                                        ),
                                                        ("attribution", wagtail.blocks.CharBlock(required=False)),
                                                        ("license_url", wagtail.blocks.URLBlock(required=False)),
                                                        ("license_name", wagtail.blocks.CharBlock(required=False)),
                                                    ]
                                                ),
                                                label="Image",
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            ("embed", wagtail.embeds.blocks.EmbedBlock()),
                            ("text", wagtail.blocks.TextBlock()),
                            ("raw_html", wagtail.blocks.RawHTMLBlock()),
                        ],
                        blank=True,
                        default=None,
                        help_text="This will be displayed before the recipe information.",
                        null=True,
                    ),
                ),
                (
                    "conclusion",
                    wagtail.fields.StreamField(
                        [
                            ("heading", wagtail.blocks.CharBlock(classname="full title")),
                            (
                                "paragraph",
                                wagtail.blocks.RichTextBlock(
                                    features=[
                                        "h1",
                                        "h2",
                                        "h3",
                                        "h4",
                                        "h5",
                                        "h6",
                                        "ol",
                                        "ul",
                                        "bold",
                                        "italic",
                                        "code",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "blockquote",
                                        "link",
                                        "documentlink",
                                        "image",
                                        "embed",
                                    ]
                                ),
                            ),
                            (
                                "code",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "language",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("", "Auto"),
                                                    ("bash", "Bash/Shell"),
                                                    ("batch", "Batch"),
                                                    ("c", "C"),
                                                    ("cpp", "C++"),
                                                    ("csharp", "C#"),
                                                    ("css", "CSS"),
                                                    ("docker", "Dockerfile"),
                                                    ("elixir", "Elixir"),
                                                    ("go", "Go"),
                                                    ("htmldjango", "Django Template"),
                                                    ("html", "HTML"),
                                                    ("javascript", "JavaScript"),
                                                    ("json", "JSON"),
                                                    ("lisp", "Lisp"),
                                                    ("make", "Makefile"),
                                                    ("nginx", "NGiNX Config"),
                                                    ("perl", "Perl"),
                                                    ("php", "PHP"),
                                                    ("python", "Python"),
                                                    ("jsx", "React JSX"),
                                                    ("ruby", "Ruby"),
                                                    ("erb", "Ruby Template/ERB"),
                                                    ("sass", "SASS"),
                                                    ("scss", "SCSS"),
                                                    ("sql", "SQL"),
                                                    ("terraform", "Terraform"),
                                                    ("yaml", "YAML"),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                        ("filename", wagtail.blocks.CharBlock(default="", required=False)),
                                        ("display_filename", wagtail.blocks.BooleanBlock(default=True, required=False)),
                                        ("code", wagtail.blocks.TextBlock(default="", required=False)),
                                        (
                                            "line_numbers",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[("", "None"), ("table", "Table"), ("inline", "Inline")],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("quote", wagtail.blocks.BlockQuoteBlock()),
                            ("other_page", wagtail.blocks.PageChooserBlock()),
                            ("document", wagtail.documents.blocks.DocumentChooserBlock()),
                            ("image", wagtail.images.blocks.ImageChooserBlock(template="wagtail_blocks/image.html")),
                            (
                                "image_detail",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("image", wagtail.images.blocks.ImageChooserBlock()),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(label="Caption", max_length=200, required=False),
                                        ),
                                        ("attribution", wagtail.blocks.CharBlock(required=False)),
                                        ("license_url", wagtail.blocks.URLBlock(required=False)),
                                        ("license_name", wagtail.blocks.CharBlock(required=False)),
                                    ]
                                ),
                            ),
                            (
                                "image_gallery",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image_items",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        ("image", wagtail.images.blocks.ImageChooserBlock()),
                                                        (
                                                            "caption",
                                                            wagtail.blocks.CharBlock(
                                                                label="Caption", max_length=200, required=False
                                                            ),
                                                        ),
                                                        ("attribution", wagtail.blocks.CharBlock(required=False)),
                                                        ("license_url", wagtail.blocks.URLBlock(required=False)),
                                                        ("license_name", wagtail.blocks.CharBlock(required=False)),
                                                    ]
                                                ),
                                                label="Image",
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            ("embed", wagtail.embeds.blocks.EmbedBlock()),
                            ("text", wagtail.blocks.TextBlock()),
                            ("raw_html", wagtail.blocks.RawHTMLBlock()),
                        ],
                        blank=True,
                        default=None,
                        help_text="This will be displayed after the recipe information.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "style",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="recipe_pages",
                        to="on_tap.BeverageStyle",
                    ),
                ),
            ],
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, "wagtailcore.page"),
        ),
        migrations.CreateModel(
            name="RecipeYeast",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sort_order", models.IntegerField(blank=True, editable=False, null=True)),
                ("name", django.contrib.postgres.fields.citext.CICharField(max_length=100)),
                ("amount", models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=6, null=True)),
                (
                    "amount_units",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "---------"),
                            ("Weight", (("g", "Grams"), ("oz", "Ounces"))),
                            (
                                "Volume",
                                (("tsp", "Teaspoons"), ("tbsp", "Tablespoons"), ("fl_oz", "Fluid Oz"), ("l", "Liters")),
                            ),
                        ],
                        default="",
                        max_length=5,
                    ),
                ),
                ("notes", wagtail.fields.RichTextField(blank=True, default="")),
                ("add_to_secondary", models.BooleanField(blank=True, default=False)),
                ("yeast_type", models.CharField(choices=[("dry", "Dry"), ("liquid", "Liquid")], max_length=25)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "recipe_page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="yeasts", to="on_tap.RecipePage"
                    ),
                ),
            ],
            options={
                "ordering": ("recipe_page", "sort_order"),
            },
        ),
        migrations.CreateModel(
            name="RecipeMiscIngredient",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sort_order", models.IntegerField(blank=True, editable=False, null=True)),
                ("amount", models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=6, null=True)),
                (
                    "amount_units",
                    models.CharField(
                        choices=[
                            ("Weight", (("g", "Grams"), ("oz", "Ounces"), ("kg", "Kilograms"), ("lb", "Pounds"))),
                            (
                                "Volume",
                                (
                                    ("tsp", "Teaspoons"),
                                    ("tbsp", "Tablespoons"),
                                    ("fl_oz", "Fluid Oz."),
                                    ("l", "Liters"),
                                    ("gal", "Gallons"),
                                ),
                            ),
                        ],
                        max_length=5,
                    ),
                ),
                (
                    "use_time",
                    models.IntegerField(
                        help_text="Amount of time the misc was boiled, steeped, mashed, etc in minutes."
                    ),
                ),
                (
                    "use_for",
                    wagtail.fields.RichTextField(
                        blank=True, default="", help_text="Short description of what the ingredient is used for in text"
                    ),
                ),
                (
                    "notes",
                    wagtail.fields.RichTextField(
                        blank=True,
                        default="",
                        help_text="Detailed notes on the item including usage. May be multiline.",
                    ),
                ),
                ("name", django.contrib.postgres.fields.citext.CICharField(max_length=100)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("spice", "Spice"),
                            ("fining", "Fining"),
                            ("water_agent", "Water Agent"),
                            ("herb", "Herb"),
                            ("flavor", "Flavor"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "use_step",
                    models.CharField(
                        choices=[
                            ("boil", "Boil"),
                            ("mash", "Mash"),
                            ("primary", "Primary"),
                            ("secondary", "Secondary"),
                            ("bottling", "Bottling"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "recipe_page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="miscellaneous_ingredients",
                        to="on_tap.RecipePage",
                    ),
                ),
            ],
            options={
                "ordering": ("recipe_page", "sort_order"),
            },
        ),
        migrations.CreateModel(
            name="RecipeHop",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sort_order", models.IntegerField(blank=True, editable=False, null=True)),
                ("name", django.contrib.postgres.fields.citext.CICharField(max_length=100)),
                ("alpha_acid_percent", models.DecimalField(decimal_places=3, max_digits=6)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=6)),
                ("amount_units", models.CharField(choices=[("g", "Grams"), ("oz", "Ounces")], max_length=5)),
                (
                    "use_step",
                    models.CharField(
                        choices=[
                            ("aroma", "Aroma"),
                            ("boil", "Boil"),
                            ("dryhop", "Dry Hop"),
                            ("firstwort", "First Wort"),
                            ("mash", "Mash"),
                        ],
                        max_length=15,
                    ),
                ),
                ("use_time", models.IntegerField(help_text="Time in minutes. Specific meaning varies by use type.")),
                ("notes", wagtail.fields.RichTextField(blank=True, default="")),
                (
                    "form",
                    models.CharField(choices=[("pellet", "Pellet"), ("plug", "Plug"), ("leaf", "Leaf")], max_length=10),
                ),
                (
                    "beta_acid_percent",
                    models.DecimalField(blank=True, decimal_places=3, default=None, max_digits=6, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "recipe_page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="hops", to="on_tap.RecipePage"
                    ),
                ),
            ],
            options={
                "ordering": ("recipe_page", "sort_order"),
            },
        ),
        migrations.CreateModel(
            name="RecipeFermentable",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sort_order", models.IntegerField(blank=True, editable=False, null=True)),
                ("amount", models.DecimalField(decimal_places=3, max_digits=6)),
                (
                    "amount_units",
                    models.CharField(
                        choices=[("g", "Grams"), ("oz", "Ounces"), ("kg", "Kilograms"), ("lb", "Pounds")], max_length=5
                    ),
                ),
                ("notes", wagtail.fields.RichTextField(blank=True, default="")),
                ("name", django.contrib.postgres.fields.citext.CICharField(max_length=100)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("grain", "Grain"),
                            ("dry_extract", "Dry Extract"),
                            ("liquid_extract", "Liquid Extract"),
                            ("sugar", "Sugar"),
                            ("adjunct", "Adjunct"),
                        ],
                        max_length=25,
                    ),
                ),
                (
                    "color",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        default=None,
                        help_text="The color of the item in Lovibond Units (SRM for liquid extracts).",
                        max_digits=6,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "recipe_page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="fermentables", to="on_tap.RecipePage"
                    ),
                ),
            ],
            options={
                "ordering": ("recipe_page", "sort_order"),
            },
        ),
        migrations.AddIndex(
            model_name="beveragestyle",
            index=models.Index(fields=["name"], name="on_tap_beve_name_673ae3_idx"),
        ),
        migrations.AddIndex(
            model_name="beveragestyle",
            index=models.Index(fields=["created_at"], name="on_tap_beve_created_b4fe1e_idx"),
        ),
        migrations.AddIndex(
            model_name="beveragestyle",
            index=models.Index(fields=["updated_at"], name="on_tap_beve_updated_df6218_idx"),
        ),
        migrations.AddField(
            model_name="batchlogpage",
            name="recipe_page",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.PROTECT, related_name="batch_log_pages", to="on_tap.RecipePage"
            ),
        ),
        migrations.AddIndex(
            model_name="recipepage",
            index=models.Index(fields=["name"], name="on_tap_reci_name_caefc3_idx"),
        ),
        migrations.AddIndex(
            model_name="recipepage",
            index=models.Index(fields=["recipe_type"], name="on_tap_reci_recipe__816e53_idx"),
        ),
        migrations.AddIndex(
            model_name="batchlogpage",
            index=models.Index(fields=["on_tap_date"], name="on_tap_batc_on_tap__2daee1_idx"),
        ),
        migrations.AddIndex(
            model_name="batchlogpage",
            index=models.Index(fields=["off_tap_date"], name="on_tap_batc_off_tap_d337e6_idx"),
        ),
        migrations.AddIndex(
            model_name="batchlogpage",
            index=models.Index(fields=["brewed_date"], name="on_tap_batc_brewed__595334_idx"),
        ),
        migrations.AddIndex(
            model_name="batchlogpage",
            index=models.Index(fields=["status"], name="on_tap_batc_status_76fb20_idx"),
        ),
        migrations.AddIndex(
            model_name="batchlogpage",
            index=models.Index(
                fields=["status", "brewed_date", "on_tap_date", "off_tap_date"], name="on_tap_batc_status_da8bf9_idx"
            ),
        ),
    ]
